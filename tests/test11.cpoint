import @std/print.cpoint
import @std/thread.cpoint
include @std/libc.hpoint

extern printptr(x : void ptr);

extern pthread_create(thread : void ptr, attr : void ptr, start_routine : func (void ptr) void ptr, arg : void ptr) i32;

extern pthread_detach(thread : void ptr);

extern pthread_join(thread : pthread_t, retval : void ptr);

func print_test(arg : void ptr) void ptr {
    printptr(arg)
    printstr("test thread")
    null
}

func create_thread(a : func (void ptr) void ptr){ // add there a function argument to create a thread
    var thread : pthread_t
    var arg : i32 = 3
    // printd(3)
    printptr(addr thread)
    printptr(addr arg)
    pthread_create(addr thread, null, a, addr arg)
    // printd(2)
    pthread_join(thread, null)
}

func main(){
  printi(argc)
  // create_thread(print_test)
  var thread : pthread_t
  var arg : i32 = 0
  // pthread_create(addr thread, 0, print_test, addr arg) // for now crash
  thread::spawn(print_test)
  return 0
}