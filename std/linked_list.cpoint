import print.cpoint

struct node_linked_list {
    var next : struct node_linked_list ptr
    var data : i32
}

struct linked_list {
    var head : struct node_linked_list ptr 
    var tail : struct node_linked_list ptr
    func linked_list() void {
        self.head = null
        self.tail = null
    }
    func append(data : i32) void {
        var temp : struct node_linked_list ptr = gc_malloc(sizeof struct node_linked_list * 2)
        if temp == null {
            #panic("failed allocation in linked list")
        }
        temp.data = data
        temp.next = null
        // printi(temp.data)
        if self.head == null {
            self.head = temp
            self.tail = temp
        } else {
            var tail : struct node_linked_list ptr = self.tail
            tail.next = temp
            self.tail = temp
        }
    }

    func remove_first() i32 {
        if self.head == null {
            #panic("removing from empty linked list")
        }
        var data : i32 = self.head.data
        self.head = self.head.next
        data
    }
    func remove_last() i32 {
        if self.head == null {
            #panic("removing from empty linked list")
        }
        var data = self.tail.data
        var current : struct node_linked_list ptr = self.head

        while current.next.next != null {
            current = current.next
        }
        current.next = null
        data
    }
    func remove(index : i32) i32 {
        if self.head == null {
            #panic("removing from empty linked list")
        }
        if index == 0 {
            return self.remove_first()
        }
        var current : struct node_linked_list ptr = self.head
        for i : i32 = 0, i < index-1, 1 {
            if current.next == null {
                return -1
            }
            current = current.next
        }
        var temp_node : struct node_linked_list ptr = current.next
        var data = temp_node.data
        current.next = temp_node.next
        data
    }
    func print() void {
        if self.head != null {
            #print("list : ")
            var current : struct node_linked_list ptr = self.head
            while current != null {
                #print("{} ", current.data)
                current = current.next
            }
            #print("\n")
        }
    }
}
