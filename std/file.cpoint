include capi.hpoint
include libc.hpoint
import print.cpoint

type fd_t i32;

mod file {

func open(path : i8 ptr) i32 {
    var mode : i32 = S_IRWXU
    open(path, O_RDONLY, mode)
}

func create(path : i8 ptr) i32 {
    var mode : i32 = S_IRWXU
    open(path, O_RDWR | O_CREAT, mode)
}

func write(fd : i32, buf : i8 ptr) i32 {
    cwritefile(fd, buf)
}

func close(fd : i32) i32 {
    close(fd)
}

func remove(path : i8 ptr) i32 {
    remove(path)
}

// TODO : fix this
func get_line(fd : i32) i8 ptr {
    var buffer_size = 20
    var buffer : i8 ptr = gc_malloc(buffer_size * sizeof i8)
    var pos : i32 = 0
    while read(fd, buffer + pos, 1) > 0 {
        // printf("%c\n", line[i])
        printf("buffer : %s\n", buffer)
        if buffer[pos] == '\n' {
            break
        }
        pos = pos + 1
        if pos == buffer_size {
            buffer_size = buffer_size + 10
            buffer = gc_realloc(buffer, buffer_size * sizeof i8)
        }
    }
    buffer[pos+1] = '\0'
    printf("buffer final : %s buffer final\n", buffer)
    var line : i8 ptr = gc_malloc(buffer_size * sizeof i8)
    var pos_line = 0
    for i = 0, i < strlen(buffer), 1 {
        if buffer[i] == '\n'{
            break
        }
        // line[i] = buffer[i]
        pos_line = i
    }
    line[pos_line] = '\0'
    line
}

// TODO : fix this
func get_file_size(fd : i32) i64 {
    var buf : struct stat
    var ret = fstat(fd, addr buf)
    if ret == -1 {
        #panic("getting file size failed")
    }
    buf.st_size
}

func read_to_string(fd : i32) i8 ptr {
    var size = file::get_file_size(fd)
    var buf = gc_malloc(sizeof i8 * (size+1))
    var ret = read(fd, buf, size)
    if ret < 0 {
        #panic("error when reading file")
    }
    while ret != 0 {
        ret = read(fd, buf, size)
        if ret < 0 {
            #panic("error when reading file")
        }
    }
    buf
}

// TODO : move these 2 functions to a fs.cpoint file ?
func canonicalize(path : i8 ptr) i8 ptr {
    var canonicalized_path : i8 ptr = gc_malloc(4096 * sizeof i8)
    realpath(path, canonicalized_path)
    canonicalized_path
}

func symlink(file_name : i8 ptr, symlink_name : i8 ptr) i32 {
    symlink(file_name, symlink_name)
}

func sync_all(fd : i32){
    fsync(fd)
}

func sync_data(fd : i32){
    fdatasync(fd)
}

func truncate(fd : i32, length : i64){
    ftruncate(fd, length)
}

}