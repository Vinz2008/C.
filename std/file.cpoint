include capi.hpoint
include libc.hpoint
import print.cpoint

type fd_t int;

mod file {

func open(path : i8 ptr) int {
    var mode : int = S_IRWXU
    var o_rdwr : int = O_RDWR
    var o_creat : int = O_CREAT
    open(path, o_rdwr | o_creat, mode)
}

func write(fd : int, buf : i8 ptr) int {
    cwritefile(fd, buf)
}

func close(fd : int){
    close(fd)
}

func create(path : i8 ptr) int {
    if file::open(path) == -1 {
        return -1
    }
    if file::close(path) == -1 {
        return -1
    }
}

func remove(path : i8 ptr) int {
    remove(path)
}

// TODO : fix this
func get_line(fd : int) i8 ptr {
    var line_size = 20
    var line : i8 ptr = gc_malloc(line_size * sizeof i8)
    var i : int = 0
    while read(fd, addr line[i], 1) > 0 {
        printf("%c\n", cast i8 line[i])
        if line[i] == '\n' {
            return line
        }
        i = i+1
        if i >= line_size {
            line_size = line_size + 10
            line = gc_realloc(line, line_size * sizeof i8)
        }
    }
    line
}

func canonicalize(path : i8 ptr) i8 ptr {
    var canonicalized_path : i8 ptr = gc_malloc(4096 * sizeof i8)
    realpath(path, canonicalized_path)
    canonicalized_path
}

func symlink(file_name : i8 ptr, symlink_name : i8 ptr) int {
    symlink(file_name, symlink_name)
}

}