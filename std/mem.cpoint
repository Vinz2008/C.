import expect.cpoint
import print.cpoint

extern strcpy(dest : i8 ptr, src : i8 ptr) i8 ptr;

mod mem {
    func memcpy(dst_ptr : void ptr, src_ptr : void ptr, size : i64) void ptr {
        var dst : i8 ptr =  dst_ptr
        var src : i8 ptr = src_ptr
        for i : int = 0, i < size, 1.0 {
            dst[i] = src[i]
        }
        dst_ptr
    }
    func memset(buf_ptr : void ptr, value : int, size : i64) void ptr{
        var buf : i8 ptr = buf_ptr
        for i : int = 0, i < size, 1.0 {
            buf[i] = value
        }
        buf_ptr
    }
    func memcmp(a_ptr : void ptr, b_ptr : void ptr, size : i64) int {
        var a : i8 ptr = a_ptr
        var b : i8 ptr = b_ptr
        for i : int = 0, i < size, 1.0 {
            if a[i] < b[i] {
                return -1
            } else if b[i] < a[i] {
                return 1
            }
        }
        return 0
    }
    // TODO : maybe reimplement it
    func strcpy(dest : i8 ptr, src : i8 ptr) i8 ptr {
        strcpy(dest, src)
    }
}

test "memcmp" {
    var a = 2
    var b = 2
    #expect(mem::memcmp(addr a, addr b, sizeof double) == 0)
}

test "memcpy" {
    var a = 2
    var b = 0
    mem::memcpy(addr b, addr a, sizeof double)
    #expect(mem::memcmp(addr b, addr a, sizeof double) == 0)
    // #expect(mem::memcmp(addr a, addr b, sizeof double) == 0)
}

test "memset" {
    var buf1 : i8 ptr = gc_malloc(10 * sizeof i8)
    var buf2 : i8 ptr = gc_malloc(10 * sizeof i8)
    // mem::memset(buf1, 0, 10)
}