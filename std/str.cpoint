include libc.hpoint
import print.cpoint

extern gc_strdup(s : i8 ptr) i8 ptr;
extern gc_free(s : int ptr) void;

extern internal_append_char(c : i8, string : i8 ptr, size : int);
extern internal_remove_char(string : i8 ptr, size : int);

struct str {
    var pointer : i8 ptr
    var len : int
    var maxlength : int
    var factor : int
}

mod String {
func create(string : i8 ptr) struct str ptr {
    var s : struct str ptr
    var i : double = sizeof int
    s = gc_malloc(i * 5)
    s.pointer = gc_strdup(string)
    s.len = strlen(s.pointer)
    s.maxlength = s.len
    s.factor = 2
    s
}

func appendChar(c : i8, string : struct str ptr){
    if string.len + 1 > string.maxlength {
        var newmaxlength = string.maxlength + string.factor
        string.pointer = gc_realloc(string.pointer, newmaxlength)
    }
    internal_append_char(c, string.pointer, string.len)
    string.len = string.len + 1
}

func removeChar(string : struct str ptr){
    internal_remove_char(string.pointer, string.len)
    string.len = string.len - 1
}

func lenstr(string : struct str) int {
    var len : int = strlen(string.pointer)
    len
}

func destroyString(string : struct str ptr) void {
    gc_free(string)
}

}

func printstring(string : struct str) void {
    printstr(string.pointer)
}
