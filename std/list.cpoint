import print.cpoint

extern gc_free(s : void ptr) void;

struct list~T~ {
    var list : T ptr
    var allocated_size : i32
    var length : i32
    func list() void {
        self.list = gc_malloc(sizeof T * 10)
        if self.list == null {
            #panic("Error when allocating the list")
        }
        self.allocated_size = 10
        self.length = 0
    }
    func append(data : T) void {
        if self.length == self.allocated_size {
            self.allocated_size = self.allocated_size * 2
            self.list = gc_realloc(self.list, self.allocated_size * sizeof T)
        }
        self.list[self.length] = data
        self.length = self.length + 1
    }
    func at(pos : i32) T {
        self.list[pos]
    }
    func print() void {
        #print("list : ")
        for i : i32 = 0, i < self.length, 1 {
            #print("{} ", self.at(i))
        }
        #print("\n")
    }
    func is_empty() bool {
        self.length == 0
    }
    func c_ptr() T ptr {
        self.list
    }
    func destroy() void {
        gc_free(self.list)
    }
}